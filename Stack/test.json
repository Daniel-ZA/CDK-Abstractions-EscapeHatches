[
    <ref *1> Nodegroup {
      node: Node {
        host: [Circular *1],
        _locked: false,
        _children: [Object],
        _context: {},
        _metadata: [],
        _dependencies: Set(0) {},
        _validations: [],
        id: 'NodegroupDefaultCapacity',
        scope: [Cluster]
      },
      stack: VpcStack {
        node: [Node],
        _missingContext: [],
        _stackDependencies: {},
        templateOptions: {},
        _crossRegionReferences: false,
        _logicalIds: [LogicalIDs],
        account: '${Token[AWS.AccountId.4]}',
        region: '${Token[AWS.Region.8]}',
        environment: 'aws://unknown-account/unknown-region',
        terminationProtection: undefined,
        _stackName: 'VpcStack',
        tags: [TagManager],
        artifactId: 'VpcStack',
        templateFile: 'VpcStack.template.json',
        _versionReportingEnabled: true,
        synthesizer: [DefaultStackSynthesizer],
        [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
      },
      env: {
        account: '${Token[AWS.AccountId.4]}',
        region: '${Token[AWS.Region.8]}'
      },
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.963]}',
      cluster: Cluster {
        node: [Node],
        stack: [VpcStack],
        env: [Object],
        _physicalName: undefined,
        _allowCrossEnvironment: false,
        physicalName: '${Token[TOKEN.652]}',
        _fargateProfiles: [],
        prune: true,
        vpc: [Vpc],
        version: [KubernetesVersion],
        kubectlLambdaRole: undefined,
        role: [Role],
        vpcSubnets: [Array],
        logging: undefined,
        endpointAccess: [EndpointAccess],
        kubectlEnvironment: undefined,
        kubectlLayer: undefined,
        awscliLayer: undefined,
        kubectlMemory: undefined,
        onEventLayer: undefined,
        clusterHandlerSecurityGroup: undefined,
        _clusterResource: [ClusterResource],
        kubectlPrivateSubnets: [Array],
        adminRole: [Role],
        _kubectlReadyBarrier: [CfnResource],
        clusterName: '${Token[TOKEN.869]}',
        clusterArn: '${Token[TOKEN.870]}',
        clusterEndpoint: '${Token[TOKEN.861]}',
        clusterCertificateAuthorityData: '${Token[TOKEN.863]}',
        clusterSecurityGroupId: '${Token[TOKEN.864]}',
        clusterEncryptionConfigKeyArn: '${Token[TOKEN.865]}',
        clusterSecurityGroup: [MutableImport],
        connections: [Connections],
        kubectlSecurityGroup: [MutableImport],
        kubectlRole: [Role],
        _kubectlResourceProvider: [KubectlProvider],
        _awsAuth: [AwsAuth],
        defaultCapacity: undefined,
        defaultNodegroup: [Circular *1],
        [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
      },
      desiredSize: 2,
      maxSize: 2,
      minSize: 2,
      role: <ref *2> Role {
        node: [Node],
        stack: [VpcStack],
        env: [Object],
        _physicalName: undefined,
        _allowCrossEnvironment: false,
        physicalName: '${Token[TOKEN.964]}',
        grantPrincipal: [Circular *2],
        principalAccount: '${Token[AWS.AccountId.4]}',
        assumeRoleAction: 'sts:AssumeRole',
        managedPolicies: [Array],
        attachedPolicies: [AttachedPolicies],
        dependables: Map(0) {},
        _didSplit: false,
        assumeRolePolicy: [PolicyDocument],
        inlinePolicies: {},
        permissionsBoundary: undefined,
        roleName: '${Token[TOKEN.973]}',
        roleArn: '${Token[TOKEN.971]}',
        _roleId: '${Token[TOKEN.970]}',
        policyFragment: [PrincipalPolicyFragment],
        [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
      },
      nodegroupArn: '${Token[TOKEN.979]}',
      nodegroupName: '${Token[TOKEN.981]}',
      [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
    },
    <ref *2> Role {
      node: Node {
        host: [Circular *2],
        _locked: false,
        _children: [Object],
        _context: {},
        _metadata: [],
        _dependencies: Set(0) {},
        _validations: [Array],
        id: 'NodeGroupRole',
        scope: [Nodegroup]
      },
      stack: VpcStack {
        node: [Node],
        _missingContext: [],
        _stackDependencies: {},
        templateOptions: {},
        _crossRegionReferences: false,
        _logicalIds: [LogicalIDs],
        account: '${Token[AWS.AccountId.4]}',
        region: '${Token[AWS.Region.8]}',
        environment: 'aws://unknown-account/unknown-region',
        terminationProtection: undefined,
        _stackName: 'VpcStack',
        tags: [TagManager],
        artifactId: 'VpcStack',
        templateFile: 'VpcStack.template.json',
        _versionReportingEnabled: true,
        synthesizer: [DefaultStackSynthesizer],
        [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
      },
      env: {
        account: '${Token[AWS.AccountId.4]}',
        region: '${Token[AWS.Region.8]}'
      },
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.964]}',
      grantPrincipal: [Circular *2],
      principalAccount: '${Token[AWS.AccountId.4]}',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [ [AwsManagedPolicy], [AwsManagedPolicy], [AwsManagedPolicy] ],
      attachedPolicies: AttachedPolicies { policies: [] },
      dependables: Map(0) {},
      _didSplit: false,
      assumeRolePolicy: PolicyDocument {
        statements: [Array],
        creationStack: [Array],
        autoAssignSids: false,
        minimize: undefined
      },
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.973]}',
      roleArn: '${Token[TOKEN.971]}',
      _roleId: '${Token[TOKEN.970]}',
      policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
      [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
    },
    <ref *3> ImportedRole {
      node: Node {
        host: [Circular *3],
        _locked: false,
        _children: {},
        _context: {},
        _metadata: [],
        _dependencies: Set(0) {},
        _validations: [],
        id: 'ImportNodeGroupRole',
        scope: [Role]
      },
      stack: VpcStack {
        node: [Node],
        _missingContext: [],
        _stackDependencies: {},
        templateOptions: {},
        _crossRegionReferences: false,
        _logicalIds: [LogicalIDs],
        account: '${Token[AWS.AccountId.4]}',
        region: '${Token[AWS.Region.8]}',
        environment: 'aws://unknown-account/unknown-region',
        terminationProtection: undefined,
        _stackName: 'VpcStack',
        tags: [TagManager],
        artifactId: 'VpcStack',
        templateFile: 'VpcStack.template.json',
        _versionReportingEnabled: true,
        synthesizer: [DefaultStackSynthesizer],
        [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
      },
      env: {
        account: '${Token[AWS.AccountId.4]}',
        region: '${Token[AWS.Region.8]}'
      },
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.966]}',
      grantPrincipal: [Circular *3],
      assumeRoleAction: 'sts:AssumeRole',
      attachedPolicies: AttachedPolicies { policies: [] },
      roleArn: 'arn:${Token[AWS.Partition.7]}:iam::${Token[AWS.AccountId.4]}:role',
      roleName: 'NodeGroupRole',
      policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
      defaultPolicyName: undefined,
      principalAccount: '${Token[AWS.AccountId.4]}',
      [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
    },
    <ref *4> CfnRole {
      node: Node {
        host: [Circular *4],
        _locked: false,
        _children: {},
        _context: {},
        _metadata: [Array],
        _dependencies: Set(0) {},
        _validations: [],
        id: 'Resource',
        scope: [Role]
      },
      stack: VpcStack {
        node: [Node],
        _missingContext: [],
        _stackDependencies: {},
        templateOptions: {},
        _crossRegionReferences: false,
        _logicalIds: [LogicalIDs],
        account: '${Token[AWS.AccountId.4]}',
        region: '${Token[AWS.Region.8]}',
        environment: 'aws://unknown-account/unknown-region',
        terminationProtection: undefined,
        _stackName: 'VpcStack',
        tags: [TagManager],
        artifactId: 'VpcStack',
        templateFile: 'VpcStack.template.json',
        _versionReportingEnabled: true,
        synthesizer: [DefaultStackSynthesizer],
        [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
      },
      logicalId: '${Token[VpcStack.HelloEKS.NodegroupDefaultCapacity.NodeGroupRole.Resource.LogicalID.968]}',
      cfnOptions: { metadata: [Object] },
      rawOverrides: {},
      dependsOn: Set(0) {},
      cfnResourceType: 'AWS::IAM::Role',
      _cfnProperties: {
        assumeRolePolicyDocument: [PolicyDocument],
        managedPolicyArns: [Array],
        policies: undefined,
        path: undefined,
        permissionsBoundary: undefined,
        roleName: '${Token[TOKEN.964]}',
        maxSessionDuration: undefined,
        description: undefined
      },
      attrArn: '${Token[TOKEN.969]}',
      attrRoleId: '${Token[TOKEN.970]}',
      assumeRolePolicyDocument: PolicyDocument {
        statements: [Array],
        creationStack: [Array],
        autoAssignSids: false,
        minimize: undefined
      },
      description: undefined,
      managedPolicyArns: [ '#{Token[TOKEN.967]}' ],
      maxSessionDuration: undefined,
      path: undefined,
      permissionsBoundary: undefined,
      policies: undefined,
      roleName: '${Token[TOKEN.964]}',
      tags: TagManager {
        tags: Map(0) {},
        priorities: Map(0) {},
        initialTagPriority: 50,
        resourceTypeName: 'AWS::IAM::Role',
        tagFormatter: StandardFormatter {},
        tagPropertyName: 'tags',
        renderedTags: [LazyAny]
      },
      [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
    },
    <ref *5> CfnNodegroup {
      node: Node {
        host: [Circular *5],
        _locked: false,
        _children: {},
        _context: {},
        _metadata: [Array],
        _dependencies: Set(0) {},
        _validations: [],
        id: 'Resource',
        scope: [Nodegroup]
      },
      stack: VpcStack {
        node: [Node],
        _missingContext: [],
        _stackDependencies: {},
        templateOptions: {},
        _crossRegionReferences: false,
        _logicalIds: [LogicalIDs],
        account: '${Token[AWS.AccountId.4]}',
        region: '${Token[AWS.Region.8]}',
        environment: 'aws://unknown-account/unknown-region',
        terminationProtection: undefined,
        _stackName: 'VpcStack',
        tags: [TagManager],
        artifactId: 'VpcStack',
        templateFile: 'VpcStack.template.json',
        _versionReportingEnabled: true,
        synthesizer: [DefaultStackSynthesizer],
        [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
      },
      logicalId: '${Token[VpcStack.HelloEKS.NodegroupDefaultCapacity.Resource.LogicalID.974]}',
      cfnOptions: { metadata: [Object] },
      rawOverrides: {},
      dependsOn: Set(0) {},
      cfnResourceType: 'AWS::EKS::Nodegroup',
      _cfnProperties: {
        clusterName: '${Token[TOKEN.869]}',
        nodegroupName: undefined,
        nodeRole: '${Token[TOKEN.971]}',
        subnets: [Array],
        amiType: 'AL2_x86_64',
        capacityType: undefined,
        diskSize: undefined,
        forceUpdateEnabled: true,
        instanceTypes: [Array],
        labels: undefined,
        taints: undefined,
        launchTemplate: undefined,
        releaseVersion: undefined,
        remoteAccess: undefined,
        scalingConfig: [Object],
        tags: undefined
      },
      attrArn: '${Token[TOKEN.975]}',
      attrClusterName: '${Token[TOKEN.976]}',
      attrId: '${Token[TOKEN.977]}',
      attrNodegroupName: '${Token[TOKEN.978]}',
      clusterName: '${Token[TOKEN.869]}',
      nodeRole: '${Token[TOKEN.971]}',
      subnets: [ '${Token[TOKEN.632]}' ],
      amiType: 'AL2_x86_64',
      capacityType: undefined,
      diskSize: undefined,
      forceUpdateEnabled: true,
      instanceTypes: [ 'm5.large' ],
      labels: undefined,
      launchTemplate: undefined,
      nodegroupName: undefined,
      releaseVersion: undefined,
      remoteAccess: undefined,
      scalingConfig: { desiredSize: 2, maxSize: 2, minSize: 2 },
      tags: TagManager {
        tags: Map(0) {},
        priorities: Map(0) {},
        initialTagPriority: 50,
        resourceTypeName: 'AWS::EKS::Nodegroup',
        tagFormatter: MapFormatter {},
        tagPropertyName: 'tags',
        renderedTags: [LazyAny]
      },
      taints: undefined,
      updateConfig: undefined,
      version: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
    }
  ]